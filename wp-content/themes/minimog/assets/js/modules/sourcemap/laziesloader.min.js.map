{"version":3,"sources":["jquery.laziestloader.js"],"names":["factory","define","amd","jQuery","$","laziestLoader","options","callback","$w","window","$elements","this","$loaded","retina","devicePixelRatio","didScroll","useNativeScroll","extend","threshold","sizePattern","getSource","$el","source","slug","data","pattern","widths","isArray","patternRetina","map","val","size","bestFitWidth","bestFit","width","i","length","replace","srcRetina","src","event","scrollThrottle","sizeOffsetPercent","setSourceMode","indexOf","onLoad","addClass","removeClass","trigger","call","bindLoader","one","ratio","setHeight","getAttribute","setAttribute","nodeName","onload","onloadstart","targetWidth","selectedWidth","offset","sort","a","b","laziestloader","docEl","document","documentElement","wHeight","innerHeight","clientHeight","wWidth","innerWidth","clientWidth","$inview","not","filter","rect","is","getBoundingClientRect","bottom","right","left","top","add","heightMultiplier","css","height","Math","round","each","on","setInterval","off","ready","fn"],"mappings":"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","file":"../../laziesloader.min.js","sourcesContent":["/**\n * @preserve LaziestLoader - v0.7.2 - 2015-11-17\n * A responsive lazy loader for jQuery.\n * http://sjwilliams.github.io/laziestloader/\n * Copyright (c) 2015 Josh Williams; Licensed MIT\n *\n * Edited by Minimog\n * Fixed:\n * - JQMIGRATE: jQuery.fn.resize() event\n * Changed:\n * - Update default threshold\n */\n\n(function(factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(['jquery'], factory);\n\t} else {\n\t\tfactory(jQuery);\n\t}\n}(function($) {\n\n\tvar laziestLoader = function(options, callback) {\n\n\t\tvar $w = $(window),\n\t\t    $elements = this,\n\t\t    $loaded = $(), // elements with the correct source set\n\t\t    retina = window.devicePixelRatio > 1,\n\t\t    didScroll = false;\n\n\t\toptions = $.extend(true, {\n\t\t\tthreshold: 1000,\n\t\t\tsizePattern: /{{SIZE}}/ig,\n\t\t\tgetSource: getSource,\n\t\t\tevent: 'scroll',\n\t\t\tscrollThrottle: 250, // time in ms to throttle scroll. Increase for better performance.\n\t\t\tsizeOffsetPercent: 0, // prefer smaller images\n\t\t\tsetSourceMode: true // plugin sets source attribute of the element. Set to false if you would like to, instead, use the callback to completely manage the element on trigger.\n\t\t}, options);\n\n\n\t\tvar useNativeScroll = (typeof options.event === 'string') && (options.event.indexOf('scroll') === 0);\n\n\t\t/**\n\t\t * Generate source path of image to load. Take into account\n\t\t * type of data supplied and whether or not a retina\n\t\t * image is available.\n\t\t *\n\t\t * Basic option: data attributes specifing a single image to load,\n\t\t * regardless of viewport.\n\t\t * Eg:\n\t\t *\n\t\t * <img data-src=\"yourimage.jpg\">\n\t\t * <img data-src=\"yourimage.jpg\" data-src-retina=\"yourretinaimage.jpg\">\n\t\t *\n\t\t * Range of sizes: specify a string path with a {{size}} that\n\t\t * will be replaced by an integer from a list of available sizes.\n\t\t * Eg:\n\t\t *\n\t\t * <img data-pattern=\"path/toyourimage-{{size}}.jpg\" data-widths=\"[320, 640, 970]\">\n\t\t * <img data-pattern=\"path/toyourimage-{{size}}.jpg\" data-pattern-retina=\"path/toyourimage-{{size}}@2x.jpg\" data-widths=\"[320, 640, 970]\">\n\t\t * <img data-pattern=\"path/toyourimage/{{size}}/slug.jpg\" data-pattern-retina=\"path/toyourimage/{{size}}/slug@2x.jpg\" data-widths=\"[320, 640, 970]\">\n\t\t *\n\t\t * Range of sizes, with slugs: specify a string path with a {{size}} that\n\t\t * will be replaced by a slug representing an image size.\n\t\t * Eg:\n\t\t *\n\t\t * <img data-pattern=\"path/toyourimage-{{size}}.jpg\" data-widths=\"[{width: 320, slug: 'small'},{width:900, slug: 'large'}]\">\n\t\t *\n\t\t * @param  {jQuery object} $el\n\t\t * @return {String}\n\t\t */\n\n\t\tfunction getSource($el) {\n\t\t\tvar source, slug;\n\t\t\tvar data = $el.data();\n\t\t\tif (data.pattern && data.widths && $.isArray(data.widths)) {\n\t\t\t\tsource = retina ? data.patternRetina : data.pattern;\n\t\t\t\tsource = source || data.pattern;\n\n\t\t\t\t// width or slug version?\n\t\t\t\tif (typeof data.widths[0] === 'object') {\n\t\t\t\t\tslug = (function() {\n\t\t\t\t\t\tvar widths = $.map(data.widths, function(val) {\n\t\t\t\t\t\t\treturn val.size;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tvar bestFitWidth = bestFit($el.width(), widths);\n\n\t\t\t\t\t\t// match best width back to its corresponding slug\n\t\t\t\t\t\tfor (var i = data.widths.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tif (data.widths[i].size === bestFitWidth) {\n\t\t\t\t\t\t\t\treturn data.widths[i].slug;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\n\t\t\t\t\tsource = source.replace(options.sizePattern, slug);\n\t\t\t\t} else {\n\t\t\t\t\tsource = source.replace(options.sizePattern, bestFit($el.width(), data.widths));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsource = retina ? data.srcRetina : data.src;\n\t\t\t\tsource = source || data.src;\n\t\t\t}\n\n\t\t\treturn source;\n\t\t}\n\n\t\t/**\n\t\t * Reflect loaded state in class names\n\t\t * and fire event.\n\t\t *\n\t\t * @param  {jQuery Object} $el\n\t\t */\n\t\tfunction onLoad($el) {\n\t\t\t$el.addClass('ll-loaded').removeClass('ll-notloaded');\n\t\t\t$el.trigger('loaded');\n\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\tcallback.call($el);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Attach event handler that sets correct\n\t\t * media source for the elements' width, or\n\t\t * allows callback to manipulate element\n\t\t * exclusively.\n\t\t */\n\n\t\tfunction bindLoader() {\n\t\t\t$elements.one('laziestloader', function() {\n\t\t\t\tvar $el = $(this);\n\t\t\t\tvar source;\n\n\t\t\t\t// set height?\n\t\t\t\tif ($el.data().ratio) {\n\t\t\t\t\tsetHeight.call(this);\n\t\t\t\t}\n\n\t\t\t\t// set content. default: set element source\n\t\t\t\tif (options.setSourceMode) {\n\t\t\t\t\tsource = options.getSource($el);\n\t\t\t\t\tif (source && this.getAttribute('src') !== source) {\n\t\t\t\t\t\tthis.setAttribute('src', source);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// applied immediately to reflect that media has started but,\n\t\t\t\t// perhaps, hasn't finished downloading.\n\t\t\t\t$el.addClass('ll-loadstarted');\n\n\t\t\t\t// Determine when to fire `loaded` event. Wait until\n\t\t\t\t// media is truly loaded if possible, otherwise immediately.\n\t\t\t\tif (options.setSourceMode && (this.nodeName === 'IMG' || this.nodeName === 'VIDEO' || this.nodeName === 'AUDIO') ) {\n\t\t\t\t\tif (this.nodeName === 'IMG') {\n\t\t\t\t\t\tthis.onload = function() {\n\t\t\t\t\t\t\tonLoad($el);\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.onloadstart = function() {\n\t\t\t\t\t\t\tonLoad($el);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tonLoad($el);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Remove even handler from elements\n\t\t */\n\n\t\tfunction unbindLoader() {\n\t\t\t$elements.off('laziestloader');\n\t\t}\n\n\t\t/**\n\t\t * Find the best sized image, opting for larger over smaller\n\t\t *\n\t\t * @param  {Number} targetWidth   element width\n\t\t * @param  {Array} widths         array of numbers\n\t\t * @return {Number}\n\t\t */\n\n\t\tvar bestFit = laziestLoader.bestFit = function(targetWidth, widths) {\n\t\t\tvar selectedWidth = widths[widths.length - 1],\n\t\t\t    i = widths.length,\n\t\t\t    offset = targetWidth * (options.sizeOffsetPercent / 100);\n\n\t\t\t// sort smallest to largest\n\t\t\twidths.sort(function(a, b) {\n\t\t\t\treturn a - b;\n\t\t\t});\n\n\t\t\twhile (i--) {\n\t\t\t\tif ((targetWidth - offset) <= widths[i]) {\n\t\t\t\t\tselectedWidth = widths[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn selectedWidth;\n\t\t};\n\n\t\t/**\n\t\t * Cycle through elements that haven't had their\n\t\t * source set and, if they're in the viewport within\n\t\t * the threshold, load their media\n\t\t */\n\n\t\tfunction laziestloader() {\n\t\t\tvar docEl = document.documentElement;\n\t\t\tvar wHeight = window.innerHeight || docEl.clientHeight;\n\t\t\tvar wWidth = window.innerWidth || docEl.clientWidth;\n\t\t\tvar threshold = options.threshold;\n\n\t\t\tvar $inview = $elements.not($loaded).filter(function() {\n\t\t\t\tif ($(this).is(':hidden')) return;\n\t\t\t\tvar rect = $(this)[0].getBoundingClientRect();\n\n\t\t\t\treturn (\n\t\t\t\t\trect.bottom + threshold > 0 &&\n\t\t\t\t\trect.right + threshold > 0 &&\n\t\t\t\t\trect.left < wWidth + threshold &&\n\t\t\t\t\trect.top < wHeight + threshold\n\t\t\t\t);\n\t\t\t});\n\n\t\t\t$inview.trigger('laziestloader');\n\t\t\t$loaded.add($inview);\n\t\t}\n\n\n\t\t/**\n\t\t * Given a lazy element, check if it should have\n\t\t * its height set based on a data-ratio multiplier.\n\t\t */\n\t\tfunction setHeight() {\n\t\t\tvar $el = $(this),\n\t\t\t    data = $el.data();\n\n\t\t\tdata.ratio = data.ratio || data.heightMultiplier; // backwards compatible for old data-height-multiplier code.\n\n\t\t\tif (data.ratio) {\n\t\t\t\t$el.css({\n\t\t\t\t\theight: Math.round($el.width() * data.ratio)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// add inital state classes, and check if\n\t\t// element dimensions need to be set.\n\t\t$elements.addClass('ll-init ll-notloaded').each(setHeight);\n\n\t\t// initial binding\n\t\tbindLoader();\n\n\n\t\t// Watch either native scroll events, throttled by\n\t\t// options.scrollThrottle, or a custom event that\n\t\t// implements its own throttling.\n\n\t\tif (useNativeScroll) {\n\t\t\t$w.on('scroll',function(){\n\t\t\t\tdidScroll = true;\n\t\t\t});\n\n\t\t\tsetInterval(function() {\n\t\t\t\tif (didScroll) {\n\t\t\t\t\tdidScroll = false;\n\t\t\t\t\tlaziestloader();\n\t\t\t\t}\n\t\t\t}, options.scrollThrottle);\n\n\t\t} else {\n\n\t\t\t// if custom event is a function, it'll need\n\t\t\t// to call laziestloader() manually, like so:\n\t\t\t//\n\t\t\t//   $('.g-lazy').laziestloader({\n\t\t\t//    event: function(cb){\n\t\t\t//      // custom scroll event on nytimes.com\n\t\t\t//      PageManager.on('nyt:page-scroll', function(){\n\t\t\t//       // do something interesting if you like\n\t\t\t//       // and then call the passed in laziestloader();\n\t\t\t//       cb();\n\t\t\t//     });\n\t\t\t//    }\n\t\t\t//  });\n\t\t\t//\n\t\t\t//\n\t\t\t// Otherwise, it's a string representing an event on the\n\t\t\t// window to subscribe to, like so:\n\t\t\t//\n\t\t\t// // some code dispatching throttled events\n\t\t\t// $window.trigger('nytg-scroll');\n\t\t\t//\n\t\t\t// $('.g-lazy').laziestloader({\n\t\t\t//   event: 'nytg-scroll'\n\t\t\t// });\n\t\t\t//\n\n\t\t\tif (typeof options.event === 'function') {\n\t\t\t\toptions.event(laziestloader);\n\t\t\t} else {\n\t\t\t\t$w.on(options.event, function(){\n\t\t\t\t\tlaziestloader();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\n\n\t\t// reset state on resize\n\t\t$w.on('resize',function() {\n\t\t\t$loaded = $();\n\t\t\tunbindLoader();\n\t\t\tbindLoader();\n\t\t\tlaziestloader();\n\t\t});\n\n\t\t// initial check for lazy images\n\t\t$(document).ready(function() {\n\t\t\tlaziestloader();\n\t\t});\n\n\t\treturn this;\n\t};\n\n\t$.fn.laziestloader = laziestLoader;\n\n}));\n"]}