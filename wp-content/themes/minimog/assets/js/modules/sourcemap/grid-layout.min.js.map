{"version":3,"sources":["grid-layout.js"],"names":["$","MinimogGridPlugin","$el","options","$grid","this","find","_isotopeOptions","itemSelector","percentPosition","transitionDuration","packery","columnWidth","fitRows","gutter","triggerMethod","method","init","resizeTimer","lazyLoadTimer","plugin","settings","data","length","type","$minimog","isRTL","originLeft","layoutMode","fn","imagesLoaded","calculateMasonrySize","laziestloader","on","evt","clearTimeout","setTimeout","one","handlerEntranceAnimation","window","addClass","event","el","$items","update","llImages","unwrap","trigger","isotope","append","always","updateLayout","disableColumnChange","parseNumberValue","setting","default_value","undefined","isNaN","parseInt","windowWidth","innerWidth","gridWidth","getBoundingClientRect","width","gutterDesktop","gutterWideScreen","gutterLaptop","gutterTabletExtra","gutterTablet","gutterMobileExtra","gutterMobile","columnsDesktop","columns","columnsWideScreen","columnsLaptop","columnsTabletExtra","columnsTablet","columnsMobileExtra","columnsMobile","zigzagHeightDesktop","zigzagHeight","zigzagHeightWideScreen","zigzagHeightLaptop","zigzagHeightTabletExtra","zigzagHeightTablet","zigzagHeightMobileExtra","zigzagHeightMobile","zigzagReversed","alternatingColumnWidth","columnAlternatingDesktop","columnAlternating","columnAlternatingWideScreen","columnAlternatingLaptop","columnAlternatingTabletExtra","columnAlternatingTablet","columnAlternatingMobileExtra","columnAlternatingMobile","wideScreenBreakPoint","laptopBreakPoint","tabletExtraBreakPoint","tabletBreakPoint","mobileExtraBreakPoint","mobileBreakPoint","oldActiveColumns","elementorFrontendConfig","elementorBreakpoints","responsive","breakpoints","widescreen","value","laptop","tablet_extra","tablet","mobile_extra","mobile","activeColumns","activeGutter","activeZigzagHeight","activeAlternatingColumns","document","body","attr","columnWidth2","Math","floor","realWidth","columnHeight","css","children","columnHeight2","columnHeight7","columnHeight13","isMetro","ratioH","alternatingLoopCount","ratio","alternatingReversed","totalAlternatingColumns","totalAlternatingFlowColumns","isAlternatingColumn","each","index","gridItem","marginTop","height","marginBottom","$itemHeight","hasClass","matchHeight","elementorWaypoint","_self","element","destroy","offset","namespace","extend","MinimogGridLayout","args","get","let","instance","jQuery"],"mappings":"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","file":"../../grid-layout.min.js","sourcesContent":["(\n\tfunction( $ ) {\n\t\t'use strict';\n\n\t\tvar MinimogGridPlugin = function( $el, options ) {\n\t\t\tthis.$el = $el;\n\t\t\tvar $grid = $el.find( '.minimog-grid' );\n\n\t\t\tvar disableColumnChange = false;\n\t\t\tvar activeColumns            = 1,\n\t\t\t    activeGutter             = 0,\n\t\t\t    activeZigzagHeight       = 0,\n\t\t\t    activeAlternatingColumns = 0; // 0 to Disable, 1 to Enable, -1 to Enable & Reversed.\n\n\t\t\tthis._isotopeOptions = {\n\t\t\t\titemSelector: '.grid-item',\n\t\t\t\tpercentPosition: true,\n\t\t\t\ttransitionDuration: 0,\n\t\t\t\tpackery: {\n\t\t\t\t\tcolumnWidth: '.grid-sizer',\n\t\t\t\t},\n\t\t\t\tfitRows: {\n\t\t\t\t\tgutter: 10\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// jQuery methods.\n\t\t\tthis.triggerMethod = ( method, options ) => {\n\t\t\t\tif ( typeof this[ method ] === 'function' ) {\n\t\t\t\t\tthis[ method ]( options );\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.init = function() {\n\t\t\t\tvar plugin = this;\n\t\t\t\tvar resizeTimer;\n\n\t\t\t\tvar settings = $el.data( 'grid' );\n\n\t\t\t\tif ( $grid.length > 0 && settings && typeof settings.type !== 'undefined' ) {\n\t\t\t\t\tif ( $minimog.isRTL ) {\n\t\t\t\t\t\tplugin._isotopeOptions.originLeft = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'masonry' === settings.type || 'metro' === settings.type ) {\n\t\t\t\t\t\tplugin._isotopeOptions.layoutMode = 'packery';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplugin._isotopeOptions.layoutMode = 'fitRows';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $.fn.imagesLoaded ) {\n\t\t\t\t\t\t$grid.imagesLoaded( function() {\n\t\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t}\n\n\t\t\t\t\tvar lazyLoadTimer;\n\t\t\t\t\tif ( $.fn.laziestloader ) {\n\t\t\t\t\t\tvar llImages = $grid.find( '.ll-image' );\n\n\t\t\t\t\t\t// Re cal layout one time when all lazy images in view loaded.\n\t\t\t\t\t\tllImages.on( 'loaded', function( evt ) {\n\t\t\t\t\t\t\tclearTimeout( lazyLoadTimer );\n\t\t\t\t\t\t\tlazyLoadTimer = setTimeout( function() {\n\t\t\t\t\t\t\t\t// Run code here, resizing has \"stopped\"\n\t\t\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\t$grid.one( 'arrangeComplete', function() {\n\t\t\t\t\t\tplugin.handlerEntranceAnimation();\n\t\t\t\t\t} );\n\n\t\t\t\t\t$( window ).on( 'hresize', function() {\n\t\t\t\t\t\tplugin.calculateMasonrySize();\n\n\t\t\t\t\t\t// Sometimes layout can be overlap. then re-cal layout one time.\n\t\t\t\t\t\tclearTimeout( resizeTimer );\n\t\t\t\t\t\tresizeTimer = setTimeout( function() {\n\t\t\t\t\t\t\t// Run code here, resizing has \"stopped\"\n\t\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t\t}, 500 ); // DO NOT decrease the time. Sometime, It'll make layout overlay on resize.\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\t$grid.addClass( 'loaded' );\n\t\t\t\t\tplugin.handlerEntranceAnimation();\n\t\t\t\t}\n\n\t\t\t\t$el.on( 'MinimogQueryEnd', function( event, el, $items ) {\n\t\t\t\t\tplugin.update( $items );\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tthis.update = function( $items ) {\n\t\t\t\tvar plugin = this;\n\t\t\t\tvar settings = $el.data( 'grid' );\n\n\t\t\t\tif ( $.fn.laziestloader ) {\n\t\t\t\t\tvar llImages = $items.find( '.ll-image' );\n\n\t\t\t\t\tif ( llImages.length > 0 ) {\n\t\t\t\t\t\tllImages.laziestloader( {}, function() {\n\t\t\t\t\t\t\t$( this ).unwrap( '.minimog-lazy-image' );\n\t\t\t\t\t\t} ).trigger( 'laziestloader' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( $grid.length > 0 && settings && typeof settings.type !== 'undefined' ) {\n\t\t\t\t\t$grid.isotope().append( $items ).isotope( 'reloadItems', $items );\n\n\t\t\t\t\tif ( $.fn.imagesLoaded ) {\n\t\t\t\t\t\tplugin.calculateMasonrySize();\n\n\t\t\t\t\t\t$grid.imagesLoaded().always( function() {\n\t\t\t\t\t\t\t$items.addClass( 'animate' );\n\t\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$items.addClass( 'animate' );\n\t\t\t\t\t\tplugin.calculateMasonrySize();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$grid.append( $items );\n\t\t\t\t\tif ( $.fn.imagesLoaded ) {\n\t\t\t\t\t\t$grid.imagesLoaded().always( function() {\n\t\t\t\t\t\t\t$items.addClass( 'animate' );\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$items.addClass( 'animate' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.updateLayout = function( options = {} ) {\n\t\t\t\tvar plugin = this;\n\n\t\t\t\tplugin.disableColumnChange = true === options.disableColumnChange;\n\n\t\t\t\tplugin.calculateMasonrySize( options );\n\t\t\t};\n\n\t\t\tthis.parseNumberValue = function( setting = '', default_value = '' ) {\n\t\t\t\tif ( undefined === setting || '' === setting || isNaN( setting ) ) {\n\t\t\t\t\treturn default_value;\n\t\t\t\t}\n\n\t\t\t\treturn parseInt( setting );\n\t\t\t};\n\n\t\t\tthis.calculateMasonrySize = function( options = {} ) {\n\t\t\t\tvar plugin = this;\n\n\t\t\t\tvar windowWidth             = window.innerWidth,\n\t\t\t\t    gridWidth               = $grid[ 0 ].getBoundingClientRect().width,\n\t\t\t\t    settings                = $el.data( 'grid' ),\n\t\t\t\t    gutterDesktop           = this.parseNumberValue( settings.gutter, 0 ),\n\t\t\t\t    gutterWideScreen        = this.parseNumberValue( settings.gutterWideScreen, gutterDesktop ),\n\t\t\t\t    gutterLaptop            = this.parseNumberValue( settings.gutterLaptop, gutterDesktop ),\n\t\t\t\t    gutterTabletExtra       = this.parseNumberValue( settings.gutterTabletExtra, gutterLaptop ),\n\t\t\t\t    gutterTablet            = this.parseNumberValue( settings.gutterTablet, gutterTabletExtra ),\n\t\t\t\t    gutterMobileExtra       = this.parseNumberValue( settings.gutterMobileExtra, gutterTablet ),\n\t\t\t\t    gutterMobile            = this.parseNumberValue( settings.gutterMobile, gutterMobileExtra ),\n\t\t\t\t    columnsDesktop          = this.parseNumberValue( settings.columns, 1 ),\n\t\t\t\t    columnsWideScreen       = this.parseNumberValue( settings.columnsWideScreen, columnsDesktop ),\n\t\t\t\t    columnsLaptop           = this.parseNumberValue( settings.columnsLaptop, columnsDesktop ),\n\t\t\t\t    columnsTabletExtra      = this.parseNumberValue( settings.columnsTabletExtra, columnsLaptop ),\n\t\t\t\t    columnsTablet           = this.parseNumberValue( settings.columnsTablet, columnsTabletExtra ),\n\t\t\t\t    columnsMobileExtra      = this.parseNumberValue( settings.columnsMobileExtra, columnsTablet ),\n\t\t\t\t    columnsMobile           = this.parseNumberValue( settings.columnsMobile, columnsMobileExtra ),\n\t\t\t\t    zigzagHeightDesktop     = this.parseNumberValue( settings.zigzagHeight, 0 ),\n\t\t\t\t    zigzagHeightWideScreen  = this.parseNumberValue( settings.zigzagHeightWideScreen, zigzagHeightDesktop ),\n\t\t\t\t    zigzagHeightLaptop      = this.parseNumberValue( settings.zigzagHeightLaptop, zigzagHeightDesktop ),\n\t\t\t\t    zigzagHeightTabletExtra = this.parseNumberValue( settings.zigzagHeightTabletExtra, zigzagHeightLaptop ),\n\t\t\t\t    zigzagHeightTablet      = this.parseNumberValue( settings.zigzagHeightTablet, zigzagHeightTabletExtra ),\n\t\t\t\t    zigzagHeightMobileExtra = this.parseNumberValue( settings.zigzagHeightMobileExtra, zigzagHeightTablet ),\n\t\t\t\t    zigzagHeightMobile      = this.parseNumberValue( settings.zigzagHeightMobile, zigzagHeightMobileExtra ),\n\t\t\t\t    zigzagReversed          = settings.zigzagReversed !== undefined && settings.zigzagReversed === 1 ? true : false;\n\n\t\t\t\tvar alternatingColumnWidth       = 0,\n\t\t\t\t    columnAlternatingDesktop     = this.parseNumberValue( settings.columnAlternating, 0 ),\n\t\t\t\t    columnAlternatingWideScreen  = this.parseNumberValue( settings.columnAlternatingWideScreen, columnAlternatingDesktop ),\n\t\t\t\t    columnAlternatingLaptop      = this.parseNumberValue( settings.columnAlternatingLaptop, columnAlternatingDesktop ),\n\t\t\t\t    columnAlternatingTabletExtra = this.parseNumberValue( settings.columnAlternatingTabletExtra, columnAlternatingLaptop ),\n\t\t\t\t    columnAlternatingTablet      = this.parseNumberValue( settings.columnAlternatingTablet, columnAlternatingTabletExtra ),\n\t\t\t\t    columnAlternatingMobileExtra = this.parseNumberValue( settings.columnAlternatingMobileExtra, columnAlternatingTablet ),\n\t\t\t\t    columnAlternatingMobile      = this.parseNumberValue( settings.columnAlternatingMobile, columnAlternatingMobileExtra );\n\n\t\t\t\tvar wideScreenBreakPoint = 1600;\n\t\t\t\tvar laptopBreakPoint = 1200;\n\t\t\t\tvar tabletExtraBreakPoint = 992;\n\t\t\t\tvar tabletBreakPoint = 768;\n\t\t\t\tvar mobileExtraBreakPoint = 576;\n\t\t\t\tvar mobileBreakPoint = 360;\n\n\t\t\t\tif ( typeof elementorFrontendConfig !== 'undefined' ) {\n\t\t\t\t\tvar elementorBreakpoints = elementorFrontendConfig.responsive.breakpoints;\n\n\t\t\t\t\twideScreenBreakPoint = this.parseNumberValue( elementorBreakpoints.widescreen.value, wideScreenBreakPoint );\n\t\t\t\t\tlaptopBreakPoint = this.parseNumberValue( elementorBreakpoints.laptop.value, laptopBreakPoint );\n\t\t\t\t\ttabletExtraBreakPoint = this.parseNumberValue( elementorBreakpoints.tablet_extra.value, tabletExtraBreakPoint );\n\t\t\t\t\ttabletBreakPoint = this.parseNumberValue( elementorBreakpoints.tablet.value, tabletBreakPoint );\n\t\t\t\t\tmobileExtraBreakPoint = this.parseNumberValue( elementorBreakpoints.mobile_extra.value, mobileBreakPoint );\n\t\t\t\t\tmobileBreakPoint = this.parseNumberValue( elementorBreakpoints.mobile.value, mobileBreakPoint );\n\t\t\t\t}\n\n\t\t\t\tvar oldActiveColumns = plugin.activeColumns;\n\n\t\t\t\tif ( ! plugin.disableColumnChange ) {\n\t\t\t\t\tif ( windowWidth >= wideScreenBreakPoint ) { // Use >= Because from up\n\t\t\t\t\t\tplugin.activeColumns = columnsWideScreen;\n\t\t\t\t\t\tplugin.activeGutter = gutterWideScreen;\n\t\t\t\t\t\tplugin.activeZigzagHeight = zigzagHeightWideScreen;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingWideScreen;\n\t\t\t\t\t} else if ( windowWidth > laptopBreakPoint ) {\n\t\t\t\t\t\tplugin.activeColumns = columnsDesktop;\n\t\t\t\t\t\tplugin.activeGutter = gutterDesktop;\n\t\t\t\t\t\tplugin.activeZigzagHeight = zigzagHeightDesktop;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingDesktop;\n\t\t\t\t\t} else if ( windowWidth > tabletExtraBreakPoint ) {\n\t\t\t\t\t\tplugin.activeColumns = columnsLaptop;\n\t\t\t\t\t\tplugin.activeGutter = gutterLaptop;\n\t\t\t\t\t\tplugin.activeZigzagHeight = zigzagHeightLaptop;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingLaptop;\n\t\t\t\t\t} else if ( windowWidth > tabletBreakPoint ) {\n\t\t\t\t\t\tplugin.activeColumns = columnsTabletExtra;\n\t\t\t\t\t\tplugin.activeGutter = gutterTabletExtra;\n\t\t\t\t\t\tplugin.activeZigzagHeight = zigzagHeightTabletExtra;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingTabletExtra;\n\t\t\t\t\t} else if ( windowWidth > mobileExtraBreakPoint ) {\n\t\t\t\t\t\tplugin.activeColumns = columnsTablet;\n\t\t\t\t\t\tplugin.activeGutter = gutterTablet;\n\t\t\t\t\t\tplugin.activeZigzagHeight = zigzagHeightTablet;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingTablet;\n\t\t\t\t\t} else if ( windowWidth > mobileBreakPoint ) {\n\t\t\t\t\t\tplugin.activeColumns = columnsMobileExtra;\n\t\t\t\t\t\tplugin.activeGutter = gutterMobileExtra;\n\t\t\t\t\t\tplugin.activeZigzagHeight = zigzagHeightMobileExtra;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingMobileExtra;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tplugin.activeColumns = columnsMobile;\n\t\t\t\t\t\tplugin.activeGutter = gutterMobile;\n\t\t\t\t\t\tplugin.activeZigzagHeight = zigzagHeightMobile;\n\t\t\t\t\t\tplugin.activeAlternatingColumns = columnAlternatingMobile;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Override Columns.\n\t\t\t\t */\n\t\t\t\tif ( typeof options.columns !== 'undefined' ) {\n\t\t\t\t\tplugin.activeColumns = options.columns;\n\t\t\t\t}\n\n\t\t\t\tif ( oldActiveColumns !== plugin.activeColumns ) {\n\t\t\t\t\t$( document.body ).trigger( 'MinimogGridLayoutColumnsChange', [\n\t\t\t\t\t\t$el,\n\t\t\t\t\t\toldActiveColumns,\n\t\t\t\t\t\tplugin.activeColumns\n\t\t\t\t\t] );\n\t\t\t\t}\n\n\t\t\t\t$el.attr( 'data-active-columns', plugin.activeColumns );\n\n\t\t\t\tvar totalGutterPerRow = (\n\t\t\t\t\t                        plugin.activeColumns - 1\n\t\t\t\t                        ) * plugin.activeGutter;\n\n\t\t\t\tvar columnWidth = (\n\t\t\t\t\t                  gridWidth - totalGutterPerRow\n\t\t\t\t                  ) / plugin.activeColumns;\n\n\t\t\t\tcolumnWidth = Math.floor( columnWidth );\n\n\t\t\t\tvar columnWidth2 = columnWidth;\n\t\t\t\tif ( plugin.activeColumns > 1 ) {\n\t\t\t\t\tcolumnWidth2 = columnWidth * 2 + plugin.activeGutter;\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Used this css var for layout grid border around\n\t\t\t\t */\n\t\t\t\tvar realWidth = columnWidth * plugin.activeColumns + plugin.activeGutter * (\n\t\t\t\t\tplugin.activeColumns - 1\n\t\t\t\t);\n\t\t\t\t$el.css( '--grid-real-width', realWidth + 'px' );\n\n\t\t\t\t$grid.children( '.grid-sizer' ).css( {\n\t\t\t\t\t'width': columnWidth + 'px'\n\t\t\t\t} );\n\n\t\t\t\tvar columnHeight   = 0,\n\t\t\t\t    columnHeight2  = 0, // 200%.\n\t\t\t\t    columnHeight7  = 0, // 70%.\n\t\t\t\t    columnHeight13 = 0, // 130%.\n\t\t\t\t    isMetro        = false,\n\t\t\t\t    ratioW         = 1,\n\t\t\t\t    ratioH         = 1;\n\n\t\t\t\tif ( settings.ratio ) {\n\t\t\t\t\tratioH = settings.ratio;\n\t\t\t\t\tisMetro = true;\n\t\t\t\t}\n\n\t\t\t\t// Calculate item height for only metro type.\n\t\t\t\tif ( isMetro ) {\n\t\t\t\t\tcolumnHeight = columnWidth * ratioH / ratioW;\n\t\t\t\t\tcolumnHeight = Math.floor( columnHeight );\n\n\t\t\t\t\tif ( plugin.activeColumns > 1 ) {\n\t\t\t\t\t\tcolumnHeight2 = columnHeight * 2 + plugin.activeGutter;\n\t\t\t\t\t\tcolumnHeight13 = parseInt( columnHeight * 1.3 );\n\t\t\t\t\t\tcolumnHeight7 = columnHeight2 - plugin.activeGutter - columnHeight13;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolumnHeight2 = columnHeight7 = columnHeight13 = columnHeight;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar alternatingLoopCount = 0;\n\t\t\t\tvar alternatingReversed = plugin.activeAlternatingColumns < 0 ? true : false;\n\t\t\t\tvar totalAlternatingColumns = alternatingReversed ? plugin.activeColumns - 1 : plugin.activeColumns + 1;\n\t\t\t\tvar totalAlternatingFlowColumns = plugin.activeColumns + totalAlternatingColumns; // Normal columns + alternating columns.\n\t\t\t\tvar isAlternatingColumn = false;\n\n\t\t\t\tif ( plugin.activeAlternatingColumns ) {\n\t\t\t\t\tif ( alternatingReversed ) {\n\t\t\t\t\t\talternatingColumnWidth = (\n\t\t\t\t\t\t\t                         gridWidth - (\n\t\t\t\t\t\t\t\t                                     totalAlternatingColumns - 1\n\t\t\t\t\t\t\t                                     ) * plugin.activeGutter\n\t\t\t\t\t\t                         ) / totalAlternatingColumns;\n\t\t\t\t\t} else {\n\t\t\t\t\t\talternatingColumnWidth = (\n\t\t\t\t\t\t\t                         gridWidth - plugin.activeColumns * plugin.activeGutter\n\t\t\t\t\t\t                         ) / (\n\t\t\t\t\t\t\t                         plugin.activeColumns + 1\n\t\t\t\t\t\t                         );\n\t\t\t\t\t}\n\n\t\t\t\t\talternatingColumnWidth = Math.floor( alternatingColumnWidth );\n\t\t\t\t}\n\n\t\t\t\t$grid.children( '.grid-item' ).each( function( index ) {\n\t\t\t\t\tvar gridItem = $( this );\n\t\t\t\t\talternatingLoopCount ++;\n\n\t\t\t\t\tif ( alternatingLoopCount > plugin.activeColumns ) {\n\t\t\t\t\t\tisAlternatingColumn = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Zigzag.\n\t\t\t\t\tif (\n\t\t\t\t\t\tplugin.activeZigzagHeight > 0 // Has zigzag.\n\t\t\t\t\t\t&& plugin.activeColumns > 1 // More than 1 column.\n\t\t\t\t\t\t&& index + 1 <= plugin.activeColumns // On top items.\n\t\t\t\t\t) {\n\t\t\t\t\t\tif ( zigzagReversed === false ) { // Is odd item.\n\t\t\t\t\t\t\tif ( index % 2 === 0 ) {\n\t\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t\t'marginTop': plugin.activeZigzagHeight + 'px'\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t\t'marginTop': '0px'\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ( index % 2 !== 0 ) {\n\t\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t\t'marginTop': plugin.activeZigzagHeight + 'px'\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t\t'marginTop': '0px'\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t'marginTop': '0px'\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( plugin.activeAlternatingColumns && isAlternatingColumn ) {\n\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t'width': alternatingColumnWidth + 'px',\n\t\t\t\t\t\t\t'height': 'auto',\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( gridItem.data( 'width' ) === 2 ) {\n\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t'width': columnWidth2 + 'px',\n\t\t\t\t\t\t\t\t'height': 'auto',\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t\t'width': columnWidth + 'px',\n\t\t\t\t\t\t\t\t'height': 'auto',\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'grid' === settings.type ) {\n\t\t\t\t\t\tgridItem.css( {\n\t\t\t\t\t\t\t'marginBottom': plugin.activeGutter + 'px'\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isMetro ) {\n\t\t\t\t\t\tvar $itemHeight;\n\n\t\t\t\t\t\tif ( gridItem.hasClass( 'grid-item-height' ) ) {\n\t\t\t\t\t\t\t$itemHeight = gridItem;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$itemHeight = gridItem.find( '.grid-item-height' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gridItem.data( 'height' ) === 2 ) {\n\t\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t\t'height': columnHeight2 + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else if ( gridItem.data( 'height' ) === 1.3 ) {\n\t\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t\t'height': columnHeight13 + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else if ( gridItem.data( 'height' ) === 0.7 ) {\n\t\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t\t'height': columnHeight7 + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$itemHeight.css( {\n\t\t\t\t\t\t\t\t'height': columnHeight + 'px'\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tisAlternatingColumn = false;\n\t\t\t\t\tif ( alternatingLoopCount % totalAlternatingFlowColumns === 0 ) {\n\t\t\t\t\t\talternatingLoopCount = 0; // Reset to next alternating row.\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( plugin._isotopeOptions ) {\n\t\t\t\t\t$grid.addClass( 'loaded' );\n\t\t\t\t\tplugin._isotopeOptions.packery.gutter = plugin.activeGutter;\n\t\t\t\t\tplugin._isotopeOptions.fitRows.gutter = plugin.activeGutter;\n\t\t\t\t\t$grid.isotope( plugin._isotopeOptions );\n\t\t\t\t}\n\n\t\t\t\t// Run after isotope function to fix overlap layout.\n\t\t\t\tif ( 'grid' === settings.type ) {\n\t\t\t\t\t$grid.children( '.grid-item' ).matchHeight();\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Delay 250 to fix layout overlap when toggle columns.\n\t\t\t\t */\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t$grid.isotope( 'layout' );\n\t\t\t\t\tif ( $grid.hasClass( 'has-animation' ) ) {\n\t\t\t\t\t\t$grid.children( '.grid-item' ).addClass( 'animate' );\n\t\t\t\t\t}\n\n\t\t\t\t\t$el.trigger( 'MinimogGridLayoutResized' );\n\t\t\t\t}, 250 );\n\t\t\t};\n\n\t\t\tthis.handlerEntranceAnimation = function() {\n\t\t\t\tif ( ! $grid.hasClass( 'has-animation' ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Used find() for flex layout.\n\t\t\t\tvar items = $grid.find( '.grid-item' );\n\n\t\t\t\titems.elementorWaypoint( function() {\n\t\t\t\t\t// Fix for different ver of waypoints plugin.\n\t\t\t\t\tvar _self = this.element ? this.element : this;\n\t\t\t\t\tvar $self = $( _self );\n\t\t\t\t\t$self.addClass( 'animate' );\n\t\t\t\t\tthis.destroy(); // trigger once.\n\t\t\t\t}, {\n\t\t\t\t\toffset: '90%'\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tthis.init();\n\t\t};\n\n\t\tconst namespace = 'minimogGridLayout';\n\n\t\t$.fn.extend( {\n\t\t\tMinimogGridLayout: function( args, update ) {\n\t\t\t\t// Check if selected element exist.\n\t\t\t\tif ( ! this.length ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\t// We need to return options.\n\t\t\t\tif ( args === 'options' ) {\n\t\t\t\t\treturn $.data( this.get( 0 ), namespace ).options();\n\t\t\t\t}\n\n\t\t\t\treturn this.each( function() {\n\t\t\t\t\tvar $el = $( this );\n\n\t\t\t\t\tlet instance = $.data( this, namespace );\n\n\t\t\t\t\tif ( instance ) { // Already created then trigger method.\n\t\t\t\t\t\tinstance.triggerMethod( args, update );\n\t\t\t\t\t} else { // Create new instance.\n\t\t\t\t\t\tinstance = new MinimogGridPlugin( $el, args );\n\t\t\t\t\t\t$.data( this, namespace, instance );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}( jQuery )\n);\n"]}